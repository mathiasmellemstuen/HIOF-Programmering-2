Oppgave 1.1 

javac: 
javac tar en eller flere *.java filer og kompilerer det til bytecode.
Denne bytecoden vil kunne kjøres i en JVM (java virtual machine). javac forkortet
og betyr "java compile".

java: 
Med java kommandoen kan du kjøre et java program. Etter du har kompilert koden til med javac
så kan du kjøre programmet ditt med java kommandoen. 

Oppgave 1.2

JRE
Java Runtime Environment er det sluttbrukerene trenger for å kjøre et program som er laget i
java. JRE inneholder JVM (java virtual machine) og standard java biblioteker og klasser. 
Du kan derimot IKKE bruke JRE til å for eksempel compile kode. 

JDK 
Java Development Kit brukes av dem som lager java programmer. JDK inneholder også muligheten
til å kjøre java programmene. I tillegg til dette så inneholder det muligheten til å 
compile java koden du skriver. 

Oppgave 1.3

Hva er en variabel? 
En variabel er en del av minne som kan inneholde data. Java er static typed som i praksis 
betyr at du må definere hva slags data type variablen er. Eksempeler på dette er 
at du skriver int number = 0. Hvis variabelen er en Integer så man man definere dette
med int, hvis det er en string så defineres det med String osv. Dette er helt motsatt
i Javascript hvor du bare bruker "var" til alle typer data.

Oppgave 1.4

Hva er en class? 
Klasser er veldig sentralt i OOP. En klasse er en måte å struktere kode. En klasse kan inneholde
variabler og metoder. En kan inneholde en constructor. 

Hva er et object? 
Når du lager en variabel som inneholder en klasse er dette ett objekt. 

Eksempel på klasse/objekt: 

Dette er en klasse: 

public class Animal() {

    public String name; 
    public Animal(String _name) { // Dette er en constructor.

        name = _name; 
    }
}

Dette er et objekt: 

Animal cat = new Animal("cat"); 

Oppgave 1.5 

Dette er min løsning på problemet, flytter "int sum;" utenfor løkken, definer i med int: 

int sum; 

for(int i = 0; i < 10; i++) {
    sum = sum+i; 

}
System.out.println("Sum is " + sum); 